{
  "name": "Serial to TCP Bridge Protocol",
  "tagline": " An error tolerant serial UART to TCP connection, raw data bridge.",
  "body": "# SerialToTCPBridgeProtocol\r\n An error tolerant serial UART to TCP connection, raw data bridge.\r\n\r\nPC side service written in Go that listens on COM ports for serial clients. \r\nThis is meant to bridge the gap between tcp connections and serial devices using UART/RS-232/Virtual COM over USB, etc. \r\nClients implementing the protocol have a tcp like api that they can use to make connections to real servers. \r\nThe goal of the project is to have the means to connect the simplest and cheapest devices to the internet, albeit indirectly. \r\n\r\n***\r\n\r\nSee [STM32SerialToTCPBridgeClient](https://github.com/RoanBrand/STM32SerialToTCPBridgeClient) for an example of a client, written in c, that connects to a MQTT broker from a STM32 Nucleo F334R8 development board.\r\n\r\n***\r\n\r\n#### Details\r\n- The Go service opens a real TCP connection to a set destination on behalf of the serial client.\r\n- The protocol provides the app an in order, duplicates free and error checked byte stream by adding a CRC32 and simple retry mechanism. See [this](https://en.wikibooks.org/wiki/Serial_Programming/Error_Correction_Methods) for background.\r\n- The service forwards traffic bi-directionally, as long as tcp connection is open and serial line is good.\r\n\r\n#### Future plans\r\n- Add config. Turn into os service. \r\n- Sort out timeout bugs\r\n- Add ping to periodically test serial line\r\n- Multiple connections for clients to servers\r\n- Unit tests\r\n- PC side service to listen to all COM ports and concurrently spawn new connections for clients\r\n- Create a Arduino lib/client that extends the [Arduino Client class](https://www.arduino.cc/en/Reference/ClientConstructor) so that libraries for existing Ethernet/Wifi shields can theoretically work.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}